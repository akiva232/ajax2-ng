{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/comps/git-db/git-db.component.ts","./src/app/comps/git-db/git-db.component.html","./src/app/services/git-db.service.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'ajax2ng';\n}\n","<app-git-db></app-git-db>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport{HttpClientModule}from '@angular/common/http'\n\nimport { AppComponent } from './app.component';\nimport { GitDbComponent } from './comps/git-db/git-db.component';\nimport { from } from 'rxjs';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    GitDbComponent\n  ],\n  imports: [\n    BrowserModule,HttpClientModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { GitDbService } from 'src/app/services/git-db.service';\n\n@Component({\n  selector: 'app-git-db',\n  templateUrl: './git-db.component.html',\n  styleUrls: ['./git-db.component.css']\n})\nexport class GitDbComponent implements OnInit {\n\n  constructor(public shuki:GitDbService) { }\n\n\ndbAjaxContent = {}\nkeysArr =[]\n\n  ngOnInit(): void {\n\n    this.shuki.httpGet(this.shuki.urlIndwx.txt).subscribe(ajaxStringResults=>\n      this.dbAjaxContent[\"txt\"]= ajaxStringResults)\n\n      this.shuki.httpGet(this.shuki.urlIndwx.js).subscribe(ajaxStringResults=>\n        this.dbAjaxContent[\"js\"]= ajaxStringResults)\n\n        this.shuki.httpGet(this.shuki.urlIndwx.json).subscribe(ajaxStringResults=>\n          this.dbAjaxContent[\"json\"]= ajaxStringResults)\n\n          this.shuki.httpGet(this.shuki.urlIndwx.html).subscribe(ajaxStringResults=>\n            this.dbAjaxContent[\"html\"]= ajaxStringResults)\n\n\n\n\n\n      for(let key in this.shuki.urlIndwx){\n        this.keysArr.push(key)\n\n        this.shuki.httpGetTxt(this.shuki.urlIndwx[key])\n        .subscribe(strREs=>\n          this.dbAjaxContent[key]= strREs)\n    \n      }\n\n\n  }\n\n}\n","\n\n\n <div class=\"divcon\">\n    <div class =\"txt\" >{{dbAjaxContent[\"txt\"]}}</div>\n </div>\n\n\n\n<div class=\"divcon\">\n    <div [class]=\"key\" *ngFor=\"let key of keysArr\">{{dbAjaxContent[key]}}</div>\n    </div>\n\n    <!-- <div class=\"divcon\">\n            <div class =\"txt\">{{dbAjaxContent[\"js\"]}}</div>\n         </div>\n\n         <div class=\"divcon\">\n                <div class =\"txt\">{{dbAjaxContent[\"json\"]}}</div>\n             </div> -->\n\n\n\n    <div class=\"html2\">\n            <div class =\"html2\" [innerHTML]=\"dbAjaxContent['html']\"></div>\n         </div>\n\n\n\n","import { Injectable } from '@angular/core';\nimport{HttpClient}from '@angular/common/http'\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GitDbService {\n\n  public urlIndwx={\n    \"txt\": \"https://raw.githubusercontent.com/bresleveloper/db/master/ajax/say%20ho.txt\",\n    \"js\" :\"https://raw.githubusercontent.com/bresleveloper/db/master/ajax/someDB.js\",\n    \"json\":\"https://raw.githubusercontent.com/bresleveloper/db/master/ajax/someDB.json\",\n    \"html\" :\"https://raw.githubusercontent.com/bresleveloper/db/master/ajax/comp-calc.html\"\n\n\n  }\n\n  constructor(private http:HttpClient) { }\n\n  httpGetTxt(url:string) : Observable<string>{\n    \n    return  this.http.get(url, {responseType:'text'})\n  }\n\n  httpGet(url:string) : Observable<string>{\n    \n   return  this.http.get<string>(url)\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":"webpack:///"}